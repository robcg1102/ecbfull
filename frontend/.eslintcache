[{"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\index.tsx":"1","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\App.tsx":"2","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\reportWebVitals.ts":"3","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Navbar\\Navbar.tsx":"4","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Home\\Home.tsx":"5","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Services\\ServiceCar.tsx":"6","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\MaitenanceItem.tsx\\MaintenanceItem.tsx":"7","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Form\\FormMaintenance.tsx":"8","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Detail\\DetailMaintenance.tsx":"9"},{"size":429,"mtime":1611605825119,"results":"10","hashOfConfig":"11"},{"size":869,"mtime":1611607689460,"results":"12","hashOfConfig":"11"},{"size":425,"mtime":1611427290615,"results":"13","hashOfConfig":"11"},{"size":987,"mtime":1611609923423,"results":"14","hashOfConfig":"11"},{"size":2412,"mtime":1611611013204,"results":"15","hashOfConfig":"11"},{"size":850,"mtime":1611613939885,"results":"16","hashOfConfig":"11"},{"size":2058,"mtime":1611608757567,"results":"17","hashOfConfig":"11"},{"size":6448,"mtime":1611614465224,"results":"18","hashOfConfig":"11"},{"size":2421,"mtime":1611615002349,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"14mekcj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\index.tsx",[],["40","41"],"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\App.tsx",[],"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Navbar\\Navbar.tsx",[],"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Home\\Home.tsx",[],"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Services\\ServiceCar.tsx",[],"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\MaitenanceItem.tsx\\MaintenanceItem.tsx",[],"C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Form\\FormMaintenance.tsx",["42"],"import { useHistory, useParams } from \"react-router-dom\";\r\nimport { useEffect, useState, ChangeEvent, FormEvent } from \"react\";\r\n\r\nimport { MaintenanceCar } from \"../../Interfaces/MaintenanceCar\";\r\nimport * as ServicesCar from \"../../Services/ServiceCar\";\r\nimport { toast } from \"react-toastify\";\r\nimport swal from \"sweetalert\";\r\n\r\ntype inputChange = ChangeEvent<HTMLInputElement | HTMLTextAreaElement>;\r\n\r\ninterface Params {\r\n  id: string;\r\n}\r\n\r\nconst FormMaintenance = () => {\r\n  const params = useParams<Params>();\r\n  const history = useHistory();\r\n\r\n  const initialState = {\r\n    description: \"\",\r\n    make: \"\",\r\n    model: \"\",\r\n    kilometers: 0,\r\n    maintenance: false,\r\n    clientName: \"\",\r\n    estimatedate: \"\",\r\n  };\r\n\r\n  const initialDate = {\r\n    todayDate: Date(),\r\n  };\r\n\r\n  const [getMaintenance, setMaintenance] = useState<MaintenanceCar>(\r\n    initialState\r\n  );\r\n  const [getTodayDate, setTodayDate] = useState(initialDate);\r\n\r\n  const formatDate = (date: string) => {\r\n    var d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n\r\n    return [year, month, day].join(\"-\");\r\n  };\r\n\r\n  const handleInputChange = (e: inputChange) => {\r\n    setMaintenance({ ...getMaintenance, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleCheck = (e: inputChange) => {\r\n    setMaintenance({\r\n      ...getMaintenance,\r\n      maintenance: !getMaintenance.maintenance,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTodayDate({\r\n      todayDate: formatDate(getTodayDate.todayDate),\r\n    });\r\n    setMaintenance({\r\n      ...getMaintenance,\r\n      estimatedate: getTodayDate.todayDate,\r\n    });\r\n\r\n    if (params.id) {\r\n      getDataMaintenance(params.id);\r\n    }\r\n  }, []);\r\n\r\n  const getDataMaintenance = async (id: string) => {\r\n    const res = await ServicesCar.getOneMaintenance(id);\r\n    const {\r\n      description,\r\n      make,\r\n      model,\r\n      kilometers,\r\n      maintenance,\r\n      clientName,\r\n      estimatedate,\r\n    } = res.data;\r\n    setMaintenance({\r\n      description,\r\n      make,\r\n      model,\r\n      kilometers,\r\n      maintenance,\r\n      clientName,\r\n      estimatedate,\r\n    });\r\n  };\r\n\r\n  const sendData = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (params.id) {\r\n      swal({\r\n        text: \"Maintenance updated!\",\r\n        icon: \"success\",\r\n      });\r\n      await ServicesCar.updateMaintenance(params.id, getMaintenance);\r\n      toast.success(\"Maintenance updated\");\r\n    } else {\r\n      swal({\r\n        text: \"Maintenance created!\",\r\n        icon: \"success\",\r\n      });\r\n      await ServicesCar.createMaintenance(getMaintenance);\r\n      toast.success(\"New Maintenance created\");\r\n    }\r\n    \r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {params.id ? <h2>Edit</h2> : <h2>Create new</h2>}\r\n      <form onSubmit={sendData}>\r\n        <div className=\"input-group mb-3\">\r\n          <span className=\"input-group-text\" id=\"basic-addon1\">\r\n            Client name\r\n          </span>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Client name\"\r\n            aria-label=\"Client name\"\r\n            aria-describedby=\"basic-addon1\"\r\n            value={getMaintenance.clientName}\r\n            onChange={handleInputChange}\r\n            name=\"clientName\"\r\n          />\r\n        </div>\r\n        <div className=\"input-group mb-3\">\r\n          <span className=\"input-group-text\" id=\"basic-addon1\">\r\n            Make\r\n          </span>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Make\"\r\n            aria-label=\"Make\"\r\n            aria-describedby=\"basic-addon1\"\r\n            value={getMaintenance.make}\r\n            onChange={handleInputChange}\r\n            name=\"make\"\r\n          />\r\n        </div>\r\n        <div className=\"input-group mb-3\">\r\n          <span className=\"input-group-text\" id=\"basic-addon1\">\r\n            Model\r\n          </span>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Model\"\r\n            aria-label=\"Model\"\r\n            aria-describedby=\"basic-addon1\"\r\n            value={getMaintenance.model}\r\n            onChange={handleInputChange}\r\n            name=\"model\"\r\n          />\r\n        </div>\r\n        <div className=\"input-group mb-3\">\r\n          <span className=\"input-group-text\">Description</span>\r\n          <textarea\r\n            value={getMaintenance.description}\r\n            className=\"form-control\"\r\n            aria-label=\"With textarea\"\r\n            onChange={handleInputChange}\r\n            name=\"description\"\r\n          />\r\n        </div>\r\n        <div className=\"input-group mb-3\">\r\n          <span className=\"input-group-text\" id=\"basic-addon1\">\r\n            Kilometers\r\n          </span>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            aria-label=\"Model\"\r\n            aria-describedby=\"basic-addon1\"\r\n            value={getMaintenance.kilometers}\r\n            onChange={handleInputChange}\r\n            name=\"kilometers\"\r\n          />\r\n        </div>\r\n        <div className=\"input-group mb-3\">\r\n          <span className=\"input-group-text\" id=\"basic-addon1\">\r\n            Estimate Date\r\n          </span>\r\n          <input\r\n            id=\"date\"\r\n            type=\"date\"\r\n            onChange={handleInputChange}\r\n            name=\"estimatedate\"\r\n            value={`${getMaintenance.estimatedate}`}\r\n            min={`${getTodayDate.todayDate}`}\r\n          />\r\n        </div>\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexCheckDefault\"\r\n              name=\"maintenance\"\r\n              onChange={handleCheck}\r\n              checked={getMaintenance.maintenance}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n              On Maintenance\r\n            </label>\r\n          </div>\r\n        </div>\r\n        {params.id ? (\r\n          <button className=\"btn btn-success\">Update Data</button>\r\n        ) : (\r\n          <button className=\"btn btn-success\">Create</button>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormMaintenance;\r\n","C:\\Users\\rober\\Desktop\\prueba-ECB\\frontend\\src\\Components\\Detail\\DetailMaintenance.tsx",["43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":73,"column":6,"nodeType":"50","endLine":73,"endColumn":8,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":24,"column":6,"nodeType":"50","endLine":24,"endColumn":8,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getMaintenance', 'getTodayDate.todayDate', and 'params.id'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTodayDate' needs the current value of 'getTodayDate.todayDate'.","ArrayExpression",["56"],"React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [getMaintenance, getTodayDate.todayDate, params.id]",{"range":"62","text":"63"},"Update the dependencies array to be: [params.id]",{"range":"64","text":"65"},[1838,1840],"[getMaintenance, getTodayDate.todayDate, params.id]",[744,746],"[params.id]"]